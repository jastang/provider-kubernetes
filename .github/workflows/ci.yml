name: CI

on:
  push:
    branches:
      - main
      - release-*
  pull_request: {}
  workflow_dispatch: {}

env:
  # Common versions
  GO_VERSION: '1.21.7'
  GOLANGCI_VERSION: 'v1.55.2'
  DOCKER_BUILDX_VERSION: 'v0.8.2'

  # Common users. We can't run a step 'if secrets.AWS_USR != ""' but we can run
  # a step 'if env.AWS_USR' != ""', so we copy these to succinctly test whether
  # credentials have been provided before trying to run steps that need them.
  XPKG_ACCESS_ID: ${{ secrets.XPKG_ACCESS_ID }}
  SBOM_FILE: /tmp/sbom-action-${{ github.run_id }}/${{ github.repository }}-publish-artifacts.spdx.json

jobs:
  detect-noop:
    runs-on: ubuntu-20.04
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'


  lint:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-lint-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check
      # Go version coming with golangci-lint-action may not be our desired
      # go version. We deploy our desired go version and then skip go
      # installation in golangci-lint-action in the next step as suggested
      # in https://github.com/golangci/golangci-lint-action/issues/183
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      # This action uses its own setup-go, which always seems to use the latest
      # stable version of Go. We could run 'make lint' to ensure our desired Go
      # version, but we prefer this action because it leaves 'annotations' (i.e.
      # it comments on PRs to point out linter violations).
      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_VERSION }}
          skip-go-installation: true

  check-diff:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-check-diff-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-check-diff-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Check Diff
        run: make check-diff

  unit-tests:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-unit-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-unit-tests-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Run Unit Tests
        run: make -j2 test

      - name: Publish Unit Test Coverage
        uses: codecov/codecov-action@v1
        with:
          flags: unittests
          file: _output/tests/linux_amd64/coverage.txt

  e2e-tests:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-e2e-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-e2e-tests-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Run the end to end tests
        run: make e2e
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"

  publish-artifacts:
    runs-on: ubuntu-20.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'

    permissions:
      # for keyless signing using GitHub OIDC token
      id-token: write
      # for uploading SARIF reports to GitHub Code Scanning.
      security-events: write

    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Setup Cosign
        uses: sigstore/cosign-installer@v3.6.0
        with:
          cosign-release: 'v2.4.0'

      - name: Validate Cosign installation
        run: cosign version

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-publish-artifacts-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-publish-artifacts-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Build Artifacts
        run: make -j2 build.all
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"

      - name: Open a file for the SBOM
        run: mkdir -p /tmp/sbom-action-${{ github.run_id }}/${{ github.repository_owner }} && touch ${{ env.SBOM_FILE }}

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          # This will scan recursively, and behind the scenes appends `dir:`.
          path: ./_output/
          output-file: ${{ env.SBOM_FILE }}
          format: spdx-json

      - name: Scan SBOM with Grype and generate CVE report
        uses: anchore/scan-action@v3
        id: cve_scan
        with:
          sbom: ${{ env.SBOM_FILE }}
          output-format: sarif
          fail-build: false

      - name: Upload SARIF report from CVE Scan
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        with:
          name: grype-scan-results.sarif
          path: ${{ steps.cve_scan.outputs.sarif }}
          retention-days: 3

      - name: Login to Upbound
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        if: env.XPKG_ACCESS_ID != ''
        with:
          registry: xpkg.dev-deba7a0e.u6d.dev
          username: ${{ secrets.XPKG_ACCESS_ID }}
          password: ${{ secrets.XPKG_TOKEN }}

      - name: Publish Artifacts to S3 and Docker Hub
        run: make -j2 publish BRANCH_NAME=${GITHUB_REF##*/}

      - name: Check for a release tag
        id: get_tag
        # Our build machinery doesn't currently support tags for the github ref.
        run: |
          TAG=$(git tag --points-at ${{ github.sha }} | head -n 1)
          if [ -n "$TAG" ]; then
            echo "Tag found on the same commit: $TAG"
            echo "::set-output name=tag_name::${TAG}"
          else
            echo "No tag found on this commit."
          fi

      - name: Create an SBOM attestation with cosign
        # TODO: use image digest, not tag.
        # TODO: parametrize repository name and switch to xpkg.upbound.io
        if: steps.get_tag.outputs.tag_name != ''
        run: cosign attest --yes --predicate ${{ env.SBOM_FILE }} --type spdxjson xpkg.dev-deba7a0e.u6d.dev/upbound/provider-kubernetes:${{ steps.get_tag.outputs.tag_name }}

      - name: Upload the SBOM to the registry
        # TODO: use image digest, not tag.
        # TODO: parametrize repository name and switch to xpkg.upbound.io
        # TODO: cosign will deprecate sbom attach, but currently there is no straightforward way to upload one to the registry.
        if: steps.get_tag.outputs.tag_name != ''
        run: cosign attach sbom --sbom ${{ env.SBOM_FILE }} xpkg.dev-deba7a0e.u6d.dev/upbound/provider-kubernetes:${{ steps.get_tag.outputs.tag_name }}

      - name: Sign the image with cosign
        # TODO: use image digest, not tag.
        if: steps.get_tag.outputs.tag_name != ''
        run: cosign sign --yes xpkg.dev-deba7a0e.u6d.dev/upbound/provider-kubernetes:${{ steps.get_tag.outputs.tag_name }}

      - name: Publish Artifacts to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: _output/**

